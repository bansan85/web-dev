name: Node.js Release

on: [workflow_dispatch]

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: angular/package-lock.json
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: "1000M"
          key: ${{ github.job }}-Release
      - name: Install dependencies
        run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository -y 'deb https://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main'
          sudo apt-get remove --purge -y '*clang*' '*llvm*'
          sudo apt-get install -y ninja-build clang-19 libclang-19-dev llvm-19-dev lld-19
      - name: Install Chrome dependencies
        run: |
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Generate Format.h wrapper
        run: |
          cmake -S cpp/native -B build_utils -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build build_utils --parallel $(nproc --all)
      - name: Emscripten
        run: |
          cd cpp/third_party/emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ../../..
          emcmake cmake -S cpp/webassembly -B build -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DWITH_SANITIZE_ADDRESS=OFF -DWITH_SANITIZE_UNDEFINED=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cd build
          npm install typescript
          export PATH=$PATH:$(pwd)/node_modules/.bin
          cmake --build . --parallel $(nproc --all)
          cd ..
      - name: Angular
        run: |
          cp build/{*.js,*.wasm,*.d.ts} angular/src/assets/
          cp build/ghostpdl-prefix/src/ghostpdl-build/bin/{gs.js,gs.wasm,gs.d.ts} angular/src/assets/
          cd angular
          npm install -g @angular/cli
          npm install
          ng test --browsers=ChromeHeadless --watch=false
          ng build --configuration production
          cd ..
      - name: Run tests
        run: |
          cmake -S cpp/tests/ -B build_tests_release -DWITH_SANITIZE_ADDRESS=OFF -DWITH_SANITIZE_UNDEFINED=OFF -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_C_COMPILER=/usr/bin/clang-19 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-19 -DCMAKE_AR=/usr/bin/llvm-ar-19 -DCMAKE_AS=/usr/bin/llvm-as-19 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-19 -DCMAKE_LINKER_TYPE=LLD -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build_tests_release --parallel $(nproc --all)
          cd build_tests_release
          ctest
      - name: Register website in known_hosts
        run: |
          mkdir /home/runner/.ssh
          chmod 700 /home/runner/.ssh
          echo "${{ secrets.UPLOAD_KNOW_HOST }}" >> /home/runner/.ssh/known_hosts
      - name: Upload to Release website
        run: |
          sshpass -p ${{ secrets.UPLOAD_PASSWORD }} sftp -P ${{ vars.UPLOAD_PORT }} ${{ secrets.UPLOAD_USERNAME }}@${{ secrets.UPLOAD_HOST }}:${{ secrets.UPLOAD_PATH_RELEASE }} <<EOF
            rm *
            mput angular/dist/web-demangler/browser/*
            mput angular/dist/web-demangler/browser/.*
            mkdir img
            cd img
            mput angular/dist/web-demangler/browser/img/*
          bye
          EOF
